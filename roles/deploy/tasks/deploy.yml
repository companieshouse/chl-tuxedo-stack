---

- name: Create temporary directory for new {{ tuxedo_user }} deployment
  become_user: "{{ tuxedo_user }}"
  tempfile:
    state: directory
  register: new_deployment_files

- name: Copy application artefact files to temporary {{ tuxedo_user }} deployment directory
  command: "cp -r {{ application_artefact_files.path }}/. {{ new_deployment_files.path }}"

- name: Ensure no config directory exists from extracted application artefact
  file:
    path: "{{ new_deployment_files.path }}/config"
    state: absent

- name: Create empty config directory
  become_user: "{{ tuxedo_user }}"
  file:
    path: "{{ new_deployment_files.path }}/config"
    state: directory

- name: Copy application config files to temporary {{ tuxedo_user }} deployment directory
  become_user: "{{ tuxedo_user }}"
  command: "cp -r {{ application_config_files.path }}/{{ tuxedo_user }}/. {{ new_deployment_files.path }}/config"

- name: Find nGsrv config files
  find:
    paths: "{{ new_deployment_files.path }}/config"
    patterns: "ngsrv.params*"
    recurse: yes
  register: ngsrv_configs

- assert:
    that:
      - ngsrv_configs.files | length > 0
    msg: "nGsrv configs must exist for placeholder values to be replaced"

# We expect the 'inventory_hostname' variable to be set to the private IPv4
# address of the instance (i.e. hostnames: private-ip-address is present
# in the dynamic inventory configuration file)
- name: Set private IPv4 host address in nGsrv configs
  replace:
    path: "{{ item.path }}"
    regexp: '^(?P<addr_env_var>ADDR=)<private-host-address>'
    replace: '\g<addr_env_var>{{ inventory_hostname }}'
  loop: "{{ ngsrv_configs.files }}"

- name: Set SNMP host address in nGsrv config files
  replace:
    path: "{{ item.path }}"
    regexp: '^(?P<snmp_env_var>SNMPMGR=)<snmp-host-address>'
    replace: '\g<snmp_env_var>{{ snmp_host_address }}'
  loop: "{{ ngsrv_configs.files }}"

- name: Set permissions for new deployment files
  file:
    path: "{{ new_deployment_files.path }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    recurse: yes

- name: Stop ngSrv services
  become_user: "{{ tuxedo_user }}"
  # shell: ngsrv.sh stop
  shell: echo "UNIMPLEMENTED"
  args:
    executable: /bin/bash

- name: Clear IPC facilities
  become_user: "{{ tuxedo_user }}"
  # shell: zapipc
  shell: echo "UNIMPLEMENTED"
  args:
    executable: /bin/bash

- name: Remove {{ tuxedo_user }} rollback directory if present
  file:
    path: "/home/{{ tuxedo_user }}/{{ rollback_dir }}"
    state: absent

- name: Check state of {{ tuxedo_user }} current deployment directory
  stat:
    path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}"
  register: current_deployment_files

- name: Backup {{ tuxedo_user }} current deployment directory if one exists
  become_user: "{{ tuxedo_user }}"
  command: "mv /home/{{ tuxedo_user }}/{{ deployment_dir }} /home/{{ tuxedo_user }}/{{ rollback_dir }}"
  when: current_deployment_files.stat.exists

- name: Install new deployment files
  become_user: "{{ tuxedo_user }}"
  command: "mv {{ new_deployment_files.path }} /home/{{ tuxedo_user }}/{{ deployment_dir }}"
