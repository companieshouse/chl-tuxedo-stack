---

- name: Set EC2 metadata facts
  amazon.aws.ec2_metadata_facts:

- name: Check required variables are set
  assert:
    that:
      - environment_name is defined and environment_name | trim | length > 0
      - application_artefact_path is defined and application_artefact_path | trim | length > 0
      - application_configs_path is defined and application_configs_path | trim | length > 0
      - snmp_host_address is defined and snmp_host_address | trim | length > 0
      - alpha_key_url is defined and alpha_key_url | trim | length > 0
      - xbrl_validator_url is defined and xbrl_validator_url | trim | length > 0
      - tnep_url is defined and tnep_url | trim | length > 0
      - xslt_transformer_url is defined and xslt_transformer_url | trim | length > 0
    msg: "Required variable(s) empty or undefined"

# The hostname is assumed to be in the format: frontend-tuxedo-<environment>-<instance-index>
- name: Set Tuxedo facts for config population
  set_fact:
     tuxedo_domain_id_suffix: "{{ ansible_facts.hostname | regex_replace('^frontend-tuxedo-([A-Za-z].*)-(\\d+)$', 'INSTANCE_\\2_\\1_DOM') | upper }}"
     tuxedo_logical_machine_id_suffix: "{{ ansible_facts.hostname | regex_replace('^frontend-tuxedo-([A-Za-z].*)-(\\d+)$', 'INSTANCE_\\2_\\1_SRV') | upper }}"
     tuxedo_local_domain_suffix: "{{ ansible_facts.hostname | regex_replace('^frontend-tuxedo-([A-Za-z].*)-(\\d+)$', 'INSTANCE_\\2_\\1_LOD') | upper }}"

- name: Set CloudWatch agent facts for config population
  set_fact:
    cloudwatch_log_stream_name: "{{ ansible_ec2_instance_id }}_{{ ansible_ec2_hostname }}"
    region: "{{ ansible_ec2_instance_identity_document_region }}"

- name: Create CloudWatch agent configuration file for instance
  template:
    src: templates/cloudwatch-config.json.j2
    dest: "{{ cloudwatch_agent.config_dir }}/cloudwatch-config.json"
    trim_blocks: False

- name: Start CloudWatch agent using primary configuration file
  command:
    cmd: "{{ cloudwatch_agent.path }} -a fetch-config -m ec2 -s -c file:{{ cloudwatch_agent.config_dir }}//cloudwatch-config.json"

- name: Using constructed variable suffixes
  ansible.builtin.debug:
    var: "{{ item }}"
  loop:
    - tuxedo_domain_id_suffix
    - tuxedo_logical_machine_id_suffix
    - tuxedo_local_domain_suffix

- name: Create temporary directory for application artefact files
  tempfile:
    state: directory
  register: application_artefact_files

- name: Set permissions to allow service users to read from temporary directory
  file:
    path: "{{ application_artefact_files.path }}"
    owner: root
    group: "{{ tuxedo_service_group }}"
    mode: 0755

- name: Deploy and extract application arterfact
  unarchive:
    src: "{{ application_artefact_path }}"
    dest: "{{ application_artefact_files.path }}"
    remote_src: no
    owner: root
    group: "{{ tuxedo_service_group }}"
    mode: 0755

- name: "Create logs directory"
  file:
    path: "/var/log/tuxedo"
    owner: root
    group: "{{ tuxedo_service_group }}"
    mode: 0755
    state: directory

- include_tasks: deploy.yml
  loop: "{{ tuxedo_service_users }}"
  loop_control:
    loop_var: tuxedo_user

- name: Retrieve environment-specific Oracle Database tnsnames.ora network configuration
  set_fact:
    tnsnames: "{{ lookup('community.hashi_vault.hashi_vault', 'applications/heritage-{{ environment_name }}-eu-west-2/tuxedo/tnsnames')['tnsnames'] }}"
  no_log: True

- name: Set Oracle Database tnsnames.ora network configuration
  template:
    src: templates/tnsnames.ora.j2
    dest: "{{ tnsnames_path }}/tnsnames.ora"
    owner: root
    group: root
    mode: 0644
  no_log: True

- name: Remove temporary directories
  file:
    path: "{{ application_artefact_files.path }}"
    state: absent
